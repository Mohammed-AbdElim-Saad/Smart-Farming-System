-wifi connection
-connection modes: TCP-->handshake Ack		UDP-->NoAck
-IP: The server IP		portNum: any http takes 80
-ESP8266 is UC with wifi peripheral and we will use it as wifi module
using Putty
\n = Enter, \r = ctrl+j
-AT Commands:
1- AT\r\n:			Check if the wifi can receive information response: \r\nOK\r\n
2- ATE0\r\n:		close the echo the commend not viewed in Putty terminal(close when working with MC) response: OK
3- ATE1\r\n:		Open the echo (use when working on putty) response: OK
4- AT+RST\r\n:		Reset The wifi module
5- AT+CWMODE=1\r\n:	work As station mode(Access point mode=2) response: OK
6- AT+CWJAP_CUR="WifiName","pass"\r\n: Connect to wifi response: WIFI CONNECTED\r\nWIFI GOT IP
7- AT+CWQAP\r\n:	Disconnect From wifi response: WIFI DISCONNECT
8- AT+CIPSTART="Mode","IP or DNS",PortNum\r\n: COnnect to Server  
	EX:AT+CIPSTART="TCP","69.197.143.14",80\r\n or AT+CIPSTART="TCP","broker.hivemq.com",1883 response:CONNECT
9- AT+CIPSEND=NumOfChars\r\n ex: AT+CIPSEND=40\r\n GET http://badr.freevar.com/status.txt\r\n response: IPD,Length:content


/*sodo code for wifi functions*/
ESP_Init(void)
{
	/*intialize USART*/
	USART_Init()
	/*Disable Echo*/
	ATE0\r\n
	/*receive response*/
	Usart_Receive
	/*set mode as station*/
	AT+CWMODE=1\r\n
}

ESP_Connectx(u8* name,u8* pass)
{
	/*connect to wifi*/
	AT+CWJAP_CUR="name","pass"\r\n
}
ESP_connectToServer(void)
{
	AT+CIPSTART="TCP","IP",80\r\n
}

send data(u8* Data)
{
	 AT+CIPSEND=len(Data)
	 Get http://badr.freevar.com/status.txt\r\n
}

boolean ESP_ValidateCmd
{
	return true or false
}