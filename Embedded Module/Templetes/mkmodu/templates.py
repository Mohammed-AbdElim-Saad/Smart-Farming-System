class Template:
    def __init__(self, module_name, layer_name, author_name):
        self.module_name = module_name
        self.layer_name = layer_name
        self.author_name = author_name
        self.program_template = f'''/**********************************************************************************************************************
 *  FILE DESCRIPTION
 *  -------------------------------------------------------------------------------------------------------------------
 *       Author:  {self.author_name}
 *	   	   File:  {self.module_name}_Program.c
 *		  Layer:  {self.layer_name}
 *       Module:  {self.module_name}
 *		Version:  1.0
 *	
 *  Description: A {self.module_name} driver that ...
 *  
 *********************************************************************************************************************/

/**********************************************************************************************************************
 *  INCLUDES
 *********************************************************************************************************************/
#include "STM32F446xx.h" 
#include "Bit_Math.h"

#include "{self.module_name}_Private.h"
#include "{self.module_name}_Config.h"
#include "{self.module_name}_Interface.h"

/**********************************************************************************************************************
 *  LOCAL DATA 
 *********************************************************************************************************************/

/**********************************************************************************************************************
 *  GLOBAL DATA
 *********************************************************************************************************************/

/**********************************************************************************************************************
 *  LOCAL FUNCTIONS
 *********************************************************************************************************************/

/**********************************************************************************************************************
 *  GLOBAL FUNCTIONS
 *********************************************************************************************************************/


/******************************************************************************
* \Syntax          : ErrorState_t FunctionName(AnyType parameterName)        
* \Description     : Describe this service                                    
*                                                                             
* \Sync\Async      : Synchronous                                               
* \Reentrancy      : Non Reentrant                                             
* \Parameters (in) : parameterName   Parameter Describtion                     
* \Parameters (out): parameterName   Parameter Describtion                                                    
* \Return value:   : Std_ReturnType  E_OK
*                                    E_NOT_OK                                  
*******************************************************************************/
ErrorState_t FunctionName(AnyType parameterName)
{{

}}

/**********************************************************************************************************************
 *  END OF FILE: {self.module_name}_Program.c
 *********************************************************************************************************************/

'''
        self.interface_template = f'''/**********************************************************************************************************************
 *  FILE DESCRIPTION
 *  -------------------------------------------------------------------------------------------------------------------
 *       Author:  {self.author_name}
 *	   	   File:  {self.module_name}_Interface.h
 *		  Layer:  {self.layer_name}
 *       Module:  {self.module_name}
 *		Version:  1.0
 *	
 *  Description:  A header file that contains function prototypes of the {self.module_name.lower()} module and includes its types.
 *  
 *********************************************************************************************************************/
#ifndef {self.module_name.upper()}_INTERFACE_H 
#define {self.module_name.upper()}_INTERFACE_H

/**********************************************************************************************************************
 * INCLUDES
 *********************************************************************************************************************/
#include "{self.module_name}_Types.h"

/**********************************************************************************************************************
 *  GLOBAL CONSTANT MACROS
 *********************************************************************************************************************/


/**********************************************************************************************************************
 *  GLOBAL FUNCTION MACROS
 *********************************************************************************************************************/


/**********************************************************************************************************************
 *  GLOBAL DATA TYPES AND STRUCTURES
 *********************************************************************************************************************/


/**********************************************************************************************************************
 *  GLOBAL DATA PROTOTYPES
 *********************************************************************************************************************/

 
/**********************************************************************************************************************
 *  GLOBAL FUNCTION PROTOTYPES
 *********************************************************************************************************************/

 
#endif  /* {self.module_name.upper()}_INTERFACE_H */

/**********************************************************************************************************************
 *  END OF FILE: {self.module_name}_Interface.h
 *********************************************************************************************************************/

'''
        self.config_template = f'''/**********************************************************************************************************************
 *  FILE DESCRIPTION
 *  -------------------------------------------------------------------------------------------------------------------
 *       Author:  {self.author_name}
 *	   	   File:  {self.module_name}_Config.h
 *		  Layer:  {self.layer_name}
 *       Module:  {self.module_name}
 *		Version:  1.0
 *	
 *  Description:  A header file that contains macros used by the user to configure the {self.module_name.lower()} module.
 *  
 *********************************************************************************************************************/
#ifndef {self.module_name.upper()}_CONFIG_H
#define {self.module_name.upper()}_CONFIG_H

/**********************************************************************************************************************
 * INCLUDES
 *********************************************************************************************************************/


/**********************************************************************************************************************
 *  GLOBAL CONSTANT MACROS
 *********************************************************************************************************************/

#endif  /* {self.module_name.upper()}_CONFIG_H */

/**********************************************************************************************************************
 *  END OF FILE: {self.module_name}_Config.h
 *********************************************************************************************************************/

'''
        self.types_template = f'''/**********************************************************************************************************************
 *  FILE DESCRIPTION
 *  -------------------------------------------------------------------------------------------------------------------
 *       Author:  {self.author_name}
 *	   	   File:  {self.module_name}_Types.h
 *		  Layer:  {self.layer_name}
 *       Module:  {self.module_name}
 *		Version:  1.0
 *	
 *  Description:  A header file that contains the API types of the {self.module_name.lower()} module. And it includes standard types
 *  
 *********************************************************************************************************************/
#ifndef {self.module_name.upper()}_TYPES_H
#define {self.module_name.upper()}_TYPES_H

/**********************************************************************************************************************
 * INCLUDES
 *********************************************************************************************************************/
#include "Std_Types.h"

/**********************************************************************************************************************
 *  GLOBAL CONSTANT MACROS
 *********************************************************************************************************************/


/**********************************************************************************************************************
 *  GLOBAL DATA TYPES AND STRUCTURES
 *********************************************************************************************************************/


/**********************************************************************************************************************
 *  GLOBAL DATA PROTOTYPES
 *********************************************************************************************************************/

#endif  /* {self.module_name.upper()}_TYPES_H */

/**********************************************************************************************************************
 *  END OF FILE: {self.module_name}_Types.h
 *********************************************************************************************************************/

'''
        self.private_template = f'''/**********************************************************************************************************************
 *  FILE DESCRIPTION
 *  -------------------------------------------------------------------------------------------------------------------
 *       Author:  {self.author_name}
 *	   	   File:  {self.module_name}_Private.h
 *		  Layer:  {self.layer_name}
 *       Module:  {self.module_name}
 *		Version:  1.0
 *	
 *  Description:  A header file that contains local macros and functions used only in the program file of the {self.module_name.lower()} module and not needed outside the scope of this module.
 *  
 *********************************************************************************************************************/

#ifndef {self.module_name.upper()}_PRIVATE_H
#define {self.module_name.upper()}_PRIVATE_H

/**********************************************************************************************************************
 *  LOCAL MACROS CONSTANT\FUNCTION
 *********************************************************************************************************************/
 
/**********************************************************************************************************************
 *  LOCAL FUNCTION PROTOTYPES
 *********************************************************************************************************************/
 
#endif  /* {self.module_name.upper()}_PRIVATE_H */

/**********************************************************************************************************************
 *  END OF FILE: {self.module_name}_Private.h
 *********************************************************************************************************************/

'''

    def set_module_name(self, name):
        self.module_name = name

    def set_author_name(self, name):
        self.author_name = name

    def set_layer_name(self, name):
        self.layer_name = name

    def get_program_template(self):
        return self.program_template
    def get_interface_template(self):
        return self.interface_template
    def get_config_template(self):
        return self.config_template
    def get_private_template(self):
        return self.private_template
    def get_types_template(self):
        return self.types_template


